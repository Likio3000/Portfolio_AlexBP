import numpy as np
import pandas as pd
import pickle
from pathlib import Path
from sklearn.model_selection import TimeSeriesSplit
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

def train_regression():
    # Set the project root directory
    project_root = Path(__file__).resolve().parent

    # Read the preprocessed data
    df = pd.read_csv(project_root / 'processed_data/processed_BTC_data.csv')
    pd.set_option('display.max_columns', None)

    # Prepare the data
    if 'Plot' in df.columns:
        df = df.drop(columns=['Plot'])

    # Set the target variable to 'target_close'
    y = df['target_close']

    # Select the features to use for training
    X = df.drop(['target_close', 'time'], axis=1)

    # Define the number of splits for TimeSeriesSplit
    n_splits = 5

    # Instantiate TimeSeriesSplit
    tscv = TimeSeriesSplit(n_splits=n_splits)

    # Instantiate the Linear Regression model
    model = LinearRegression()

    # Initialize lists to store the cross-validation metrics
    mse_scores = []
    r2_scores = []

    # Initialize a list to store the DataFrames for each split
    performance_data_list = []

    # Iterate over the train-test splits generated by TimeSeriesSplit
    for train_index, test_index in tscv.split(X):
        X_train, X_test = X.iloc[train_index], X.iloc[test_index]
        y_train, y_test = y.iloc[train_index], y.iloc[test_index]

        # Fit the model on the training data
        model.fit(X_train, y_train)

        # Make predictions on the test data
        y_pred = model.predict(X_test)

        # Calculate the mean squared error and R^2 score for the current split
        mse = mean_squared_error(y_test, y_pred)
        r2 = r2_score(y_test, y_pred)

        # Append the metrics to the corresponding lists
        mse_scores.append(mse)
        r2_scores.append(r2)

        # Append the test results for the current split to the performance_data DataFrame
        split_performance_data = pd.DataFrame({"true_values": y_test.values, "predictions": y_pred, "errors": y_test.values - y_pred})
        performance_data_list.append(split_performance_data)

    # Concatenate all the performance_data DataFrames
    performance_data = pd.concat(performance_data_list, ignore_index=True)

    # Calculate the average mean squared error, R^2 score
    avg_mse = np.mean(mse_scores)
    avg_r2 = np.mean(r2_scores)

    # Create the 'regression_model' directory if it doesn't exist
    regression_model_dir = project_root / 'regression_model'
    regression_model_dir.mkdir(parents=True, exist_ok=True)

    # Save the trained model to a .pkl file
    with open(regression_model_dir / 'model.pkl', 'wb') as f:
        pickle.dump(model, f)

    # Save the performance data to a CSV file
    performance_data.to_csv(regression_model_dir / 'performance_data.csv', index=False)

    return avg_mse, avg_r2
